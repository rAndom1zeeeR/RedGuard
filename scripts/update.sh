#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è RedGuard —Å–µ—Ä–≤–µ—Ä–∞
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –±—ç–∫–∞–ø–æ–º –∏ rollback

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
    exit 1
}

warning() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
UPDATE_DIR="/opt/vpn-proxy"
BACKUP_DIR="/opt/vpn-proxy/backups"
TIMESTAMP=$(date +%Y%m%d-%H%M%S)
BACKUP_NAME="pre-update-backup-$TIMESTAMP"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ root
if [[ $EUID -ne 0 ]]; then
   error "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω —Å –ø—Ä–∞–≤–∞–º–∏ root (sudo)"
fi

log "–ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ RedGuard —Å–µ—Ä–≤–µ—Ä–∞"
info "–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: $TIMESTAMP"

# –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
cd "$UPDATE_DIR"

# –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
log "–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º..."
mkdir -p "$BACKUP_DIR"
tar -czf "$BACKUP_DIR/$BACKUP_NAME.tar.gz" \
    --exclude="node_modules" \
    --exclude=".git" \
    --exclude="backups" \
    --exclude="logs" \
    . 2>/dev/null || true

log "–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: $BACKUP_DIR/$BACKUP_NAME.tar.gz"

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker compose down || true

# –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
sleep 10

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ Git (–µ—Å–ª–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
if [ -d ".git" ]; then
    log "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
    git stash push -m "Auto-stash before update $TIMESTAMP" || true
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    git fetch origin
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    LOCAL=$(git rev-parse HEAD)
    REMOTE=$(git rev-parse origin/main)
    
    if [ "$LOCAL" = "$REMOTE" ]; then
        warning "–ù–µ—Ç –Ω–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏"
    else
        log "–ù–∞–π–¥–µ–Ω—ã –Ω–æ–≤—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –ü—Ä–∏–º–µ–Ω—è–µ–º..."
        git reset --hard origin/main
        log "–ö–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ –≤–µ—Ä—Å–∏–∏: $(git rev-parse --short HEAD)"
    fi
else
    warning "Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–¥–∞."
fi

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Node.js
if [ -f "package.json" ]; then
    log "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Node.js..."
    npm install --production || true
fi

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Docker –æ–±—Ä–∞–∑–æ–≤
log "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Docker –æ–±—Ä–∞–∑–æ–≤..."
docker compose pull

# –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤
log "–ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
docker compose build --no-cache

# –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –æ–±—Ä–∞–∑–æ–≤
log "–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö Docker –æ–±—Ä–∞–∑–æ–≤..."
docker image prune -f || true

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
log "–ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker compose up -d

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
log "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
sleep 30

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker compose ps

# –ü—Ä–æ–≤–µ—Ä–∫–∞ health check
log "–ü—Ä–æ–≤–µ—Ä–∫–∞ health check..."
HEALTH_CHECK_ATTEMPTS=0
MAX_HEALTH_CHECK_ATTEMPTS=10

while [ $HEALTH_CHECK_ATTEMPTS -lt $MAX_HEALTH_CHECK_ATTEMPTS ]; do
    if curl -f http://localhost:3000/api/health > /dev/null 2>&1; then
        log "Health check –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ"
        break
    else
        HEALTH_CHECK_ATTEMPTS=$((HEALTH_CHECK_ATTEMPTS + 1))
        warning "Health check –Ω–µ –ø—Ä–æ—à–µ–ª (–ø–æ–ø—ã—Ç–∫–∞ $HEALTH_CHECK_ATTEMPTS/$MAX_HEALTH_CHECK_ATTEMPTS)"
        sleep 10
    fi
done

# –ï—Å–ª–∏ health check –Ω–µ –ø—Ä–æ—à–µ–ª, –≤—ã–ø–æ–ª–Ω—è–µ–º rollback
if [ $HEALTH_CHECK_ATTEMPTS -eq $MAX_HEALTH_CHECK_ATTEMPTS ]; then
    error "Health check –Ω–µ –ø—Ä–æ—à–µ–ª –ø–æ—Å–ª–µ $MAX_HEALTH_CHECK_ATTEMPTS –ø–æ–ø—ã—Ç–æ–∫. –í—ã–ø–æ–ª–Ω—è–µ–º rollback..."
    
    log "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ rollback..."
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
    docker compose down || true
    
    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞
    if [ -f "$BACKUP_DIR/$BACKUP_NAME.tar.gz" ]; then
        log "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞: $BACKUP_NAME.tar.gz"
        tar -xzf "$BACKUP_DIR/$BACKUP_NAME.tar.gz"
        
        # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
        docker compose up -d
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
        sleep 30
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        if curl -f http://localhost:3000/api/health > /dev/null 2>&1; then
            log "Rollback –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ"
        else
            error "Rollback –Ω–µ —É–¥–∞–ª—Å—è. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ."
        fi
    else
        error "–ë—ç–∫–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ."
    fi
    
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏
log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –Ω–∞ –æ—à–∏–±–∫–∏..."
ERROR_COUNT=$(docker compose logs --since="5m" | grep -i "error\|exception\|fatal" | wc -l)

if [ $ERROR_COUNT -gt 0 ]; then
    warning "–ù–∞–π–¥–µ–Ω–æ $ERROR_COUNT –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç"
    docker compose logs --since="5m" | grep -i "error\|exception\|fatal" | tail -10
fi

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞
log "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–∞..."
systemctl daemon-reload
systemctl enable vpn-proxy

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π
log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤..."
info "Docker –≤–µ—Ä—Å–∏—è: $(docker --version)"
info "Docker Compose –≤–µ—Ä—Å–∏—è: $(docker compose version)"
if command -v node &> /dev/null; then
    info "Node.js –≤–µ—Ä—Å–∏—è: $(node --version)"
fi
if command -v tsc &> /dev/null; then
    info "TypeScript –≤–µ—Ä—Å–∏—è: $(tsc --version)"
fi

# –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
log "–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏..."
cat > "/opt/vpn-proxy/update-report-$TIMESTAMP.txt" << EOF
RedGuard Server Update Report
==============================

Update Date: $(date)
Update Time: $TIMESTAMP
Server ID: ${SERVER_ID:-unknown}
Hostname: $(hostname)

Pre-Update Backup: $BACKUP_NAME.tar.gz

Components Updated:
- Docker Images: Updated
- Node.js Dependencies: Updated
- Application Code: Updated (if Git repo configured)

Post-Update Status:
- Services: $(docker compose ps --format "table {{.Name}}\t{{.Status}}" | tail -n +2)
- Health Check: Passed
- Errors in Logs: $ERROR_COUNT

Docker Images:
$(docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}")

System Resources:
$(df -h | head -1)
$(df -h | grep -E "(/$|/opt)")

Memory Usage:
$(free -h)

Network Status:
$(netstat -tlnp | grep -E ':(80|443|8080|1080|3000|6379|8404)')

Update completed successfully!
EOF

log "–û—Ç—á–µ—Ç –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–∑–¥–∞–Ω: /opt/vpn-proxy/update-report-$TIMESTAMP.txt"

# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ (—Å—Ç–∞—Ä—à–µ 30 –¥–Ω–µ–π)
find /opt/vpn-proxy -name "update-report-*.txt" -mtime +30 -delete 2>/dev/null || true

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
if [ -n "$TELEGRAM_BOT_TOKEN" ] && [ -n "$TELEGRAM_CHAT_ID" ]; then
    curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
        -d chat_id="$TELEGRAM_CHAT_ID" \
        -d text="üîÑ RedGuard Server Update

‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
üïê –í—Ä–µ–º—è: $(date)
üñ•Ô∏è –°–µ—Ä–≤–µ—Ä: $(hostname)
üìä –û—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö: $ERROR_COUNT
üíæ –ë—ç–∫–∞–ø: $BACKUP_NAME.tar.gz" \
        > /dev/null 2>&1 || true
fi

# –§–∏–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
log "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ RedGuard —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
info "–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: $TIMESTAMP"
info "–ë—ç–∫–∞–ø: $BACKUP_DIR/$BACKUP_NAME.tar.gz"
info "–û—Ç—á–µ—Ç: /opt/vpn-proxy/update-report-$TIMESTAMP.txt"
info "–û—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö: $ERROR_COUNT"

# –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
echo
log "–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
docker compose ps

log "–°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω!"
